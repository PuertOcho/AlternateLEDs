
AlternateLEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f50  08000f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f50  08000f50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f50  08000f50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f50  08000f50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000f64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000f64  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004eac  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012c0  00000000  00000000  00024f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c8  00000000  00000000  000261eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000409  00000000  00000000  000266b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024136  00000000  00000000  00026abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006488  00000000  00000000  0004abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddfe3  00000000  00000000  0005107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a5c  00000000  00000000  0012f060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00001058  00000000  00000000  0012fabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ef8 	.word	0x08000ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000ef8 	.word	0x08000ef8

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b500      	push	{lr}
 80001ca:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001cc:	2244      	movs	r2, #68	; 0x44
 80001ce:	2100      	movs	r1, #0
 80001d0:	a805      	add	r0, sp, #20
 80001d2:	f000 fe65 	bl	8000ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	2214      	movs	r2, #20
 80001d8:	2100      	movs	r1, #0
 80001da:	4668      	mov	r0, sp
 80001dc:	f000 fe60 	bl	8000ea0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80001e4:	f000 fa6c 	bl	80006c0 <HAL_PWREx_ControlVoltageScaling>
 80001e8:	b108      	cbz	r0, 80001ee <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001ec:	e7fe      	b.n	80001ec <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2210      	movs	r2, #16
 80001f0:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 80001f4:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 80001fa:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 80001fe:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000202:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000206:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800020a:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000210:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f000 fb1b 	bl	800084c <HAL_RCC_OscConfig>
 8000216:	b108      	cbz	r0, 800021c <SystemClock_Config+0x54>
 8000218:	b672      	cpsid	i
  while (1)
 800021a:	e7fe      	b.n	800021a <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021c:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000220:	220f      	movs	r2, #15
 8000222:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000226:	2104      	movs	r1, #4
 8000228:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800022e:	f000 fd8d 	bl	8000d4c <HAL_RCC_ClockConfig>
 8000232:	b108      	cbz	r0, 8000238 <SystemClock_Config+0x70>
 8000234:	b672      	cpsid	i
  while (1)
 8000236:	e7fe      	b.n	8000236 <SystemClock_Config+0x6e>
}
 8000238:	b017      	add	sp, #92	; 0x5c
 800023a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000240 <main>:
{
 8000240:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8000242:	f000 f8c3 	bl	80003cc <HAL_Init>
  SystemClock_Config();
 8000246:	f7ff ffbf 	bl	80001c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	2214      	movs	r2, #20
 800024c:	2100      	movs	r1, #0
 800024e:	a801      	add	r0, sp, #4
 8000250:	f000 fe26 	bl	8000ea0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <main+0x90>)
 8000256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000258:	f042 0201 	orr.w	r2, r2, #1
 800025c:	64da      	str	r2, [r3, #76]	; 0x4c
 800025e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	21c0      	movs	r1, #192	; 0xc0
 800026a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000270:	f000 fa18 	bl	80006a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000274:	2301      	movs	r3, #1
 8000276:	22c0      	movs	r2, #192	; 0xc0
 8000278:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000284:	e9cd 3303 	strd	r3, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000288:	f000 f92e 	bl	80004e8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA,myled1,GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2140      	movs	r1, #64	; 0x40
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f000 fa06 	bl	80006a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,myled2,GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f000 fa00 	bl	80006a4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a8:	f000 f8b2 	bl	8000410 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,myled1,GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f000 f9f6 	bl	80006a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,myled2,GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 f9f0 	bl	80006a4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c8:	f000 f8a2 	bl	8000410 <HAL_Delay>
  while (1)
 80002cc:	e7de      	b.n	800028c <main+0x4c>
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000

080002d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <HAL_MspInit+0x2c>)
 80002d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80002d8:	f042 0201 	orr.w	r2, r2, #1
 80002dc:	661a      	str	r2, [r3, #96]	; 0x60
 80002de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80002e0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002e2:	f002 0201 	and.w	r2, r2, #1
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80002ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002f0:	659a      	str	r2, [r3, #88]	; 0x58
 80002f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fc:	b002      	add	sp, #8
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000304:	e7fe      	b.n	8000304 <NMI_Handler>

08000306 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <HardFault_Handler>

08000308 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <MemManage_Handler>

0800030a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800030a:	e7fe      	b.n	800030a <BusFault_Handler>

0800030c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <UsageFault_Handler>

0800030e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030e:	4770      	bx	lr

08000310 <DebugMon_Handler>:
 8000310:	4770      	bx	lr

08000312 <PendSV_Handler>:
 8000312:	4770      	bx	lr

08000314 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000314:	f000 b86a 	b.w	80003ec <HAL_IncTick>

08000318 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000318:	4a03      	ldr	r2, [pc, #12]	; (8000328 <SystemInit+0x10>)
 800031a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800031e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000322:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000326:	4770      	bx	lr
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <Reset_Handler>:
 800032c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000364 <LoopForever+0x2>
 8000330:	f7ff fff2 	bl	8000318 <SystemInit>
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
 800033a:	2300      	movs	r3, #0
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:
 800033e:	58d4      	ldr	r4, [r2, r3]
 8000340:	50c4      	str	r4, [r0, r3]
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:
 8000344:	18c4      	adds	r4, r0, r3
 8000346:	428c      	cmp	r4, r1
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
 800034e:	2300      	movs	r3, #0
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:
 8000356:	42a2      	cmp	r2, r4
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>
 800035a:	f000 fda9 	bl	8000eb0 <__libc_init_array>
 800035e:	f7ff ff6f 	bl	8000240 <main>

08000362 <LoopForever>:
 8000362:	e7fe      	b.n	8000362 <LoopForever>
 8000364:	20018000 	.word	0x20018000
 8000368:	20000000 	.word	0x20000000
 800036c:	2000000c 	.word	0x2000000c
 8000370:	08000f58 	.word	0x08000f58
 8000374:	2000000c 	.word	0x2000000c
 8000378:	2000002c 	.word	0x2000002c

0800037c <ADC1_2_IRQHandler>:
 800037c:	e7fe      	b.n	800037c <ADC1_2_IRQHandler>
	...

08000380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000380:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_InitTick+0x40>)
 8000384:	781a      	ldrb	r2, [r3, #0]
{
 8000386:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000388:	b90a      	cbnz	r2, 800038e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800038a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800038c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800038e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000392:	fbb3 f3f2 	udiv	r3, r3, r2
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <HAL_InitTick+0x44>)
 8000398:	6810      	ldr	r0, [r2, #0]
 800039a:	fbb0 f0f3 	udiv	r0, r0, r3
 800039e:	f000 f88f 	bl	80004c0 <HAL_SYSTICK_Config>
 80003a2:	4604      	mov	r4, r0
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d1f0      	bne.n	800038a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003a8:	2d0f      	cmp	r5, #15
 80003aa:	d8ee      	bhi.n	800038a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ac:	4602      	mov	r2, r0
 80003ae:	4629      	mov	r1, r5
 80003b0:	f04f 30ff 	mov.w	r0, #4294967295
 80003b4:	f000 f852 	bl	800045c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <HAL_InitTick+0x48>)
 80003ba:	4620      	mov	r0, r4
 80003bc:	601d      	str	r5, [r3, #0]
  return status;
 80003be:	e7e5      	b.n	800038c <HAL_InitTick+0xc>
 80003c0:	20000004 	.word	0x20000004
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000008 	.word	0x20000008

080003cc <HAL_Init>:
{
 80003cc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ce:	2003      	movs	r0, #3
 80003d0:	f000 f832 	bl	8000438 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003d4:	200f      	movs	r0, #15
 80003d6:	f7ff ffd3 	bl	8000380 <HAL_InitTick>
 80003da:	4604      	mov	r4, r0
 80003dc:	b918      	cbnz	r0, 80003e6 <HAL_Init+0x1a>
    HAL_MspInit();
 80003de:	f7ff ff79 	bl	80002d4 <HAL_MspInit>
}
 80003e2:	4620      	mov	r0, r4
 80003e4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80003e6:	2401      	movs	r4, #1
 80003e8:	e7fb      	b.n	80003e2 <HAL_Init+0x16>
	...

080003ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80003ec:	4a03      	ldr	r2, [pc, #12]	; (80003fc <HAL_IncTick+0x10>)
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <HAL_IncTick+0x14>)
 80003f0:	6811      	ldr	r1, [r2, #0]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	440b      	add	r3, r1
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000004 	.word	0x20000004

08000404 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000404:	4b01      	ldr	r3, [pc, #4]	; (800040c <HAL_GetTick+0x8>)
 8000406:	6818      	ldr	r0, [r3, #0]
}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028

08000410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000410:	b538      	push	{r3, r4, r5, lr}
 8000412:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000414:	f7ff fff6 	bl	8000404 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000418:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800041a:	bf1c      	itt	ne
 800041c:	4b05      	ldrne	r3, [pc, #20]	; (8000434 <HAL_Delay+0x24>)
 800041e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000420:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8000422:	bf18      	it	ne
 8000424:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000426:	f7ff ffed 	bl	8000404 <HAL_GetTick>
 800042a:	1b43      	subs	r3, r0, r5
 800042c:	42a3      	cmp	r3, r4
 800042e:	d3fa      	bcc.n	8000426 <HAL_Delay+0x16>
  {
  }
}
 8000430:	bd38      	pop	{r3, r4, r5, pc}
 8000432:	bf00      	nop
 8000434:	20000004 	.word	0x20000004

08000438 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000438:	4907      	ldr	r1, [pc, #28]	; (8000458 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800043a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800043c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000440:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000448:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800044a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800044c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000454:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000456:	4770      	bx	lr
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	68dc      	ldr	r4, [r3, #12]
 8000462:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000466:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	2b04      	cmp	r3, #4
 800046e:	bf28      	it	cs
 8000470:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000478:	bf8c      	ite	hi
 800047a:	3c03      	subhi	r4, #3
 800047c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047e:	fa05 f303 	lsl.w	r3, r5, r3
 8000482:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000486:	40a5      	lsls	r5, r4
 8000488:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800048c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800048e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000490:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	bfac      	ite	ge
 8000496:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049a:	4a08      	ldrlt	r2, [pc, #32]	; (80004bc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a0:	bfb8      	it	lt
 80004a2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	bfaa      	itet	ge
 80004aa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	e000ed14 	.word	0xe000ed14

080004c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c0:	3801      	subs	r0, #1
 80004c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004c6:	d20b      	bcs.n	80004e0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ce:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d0:	21f0      	movs	r1, #240	; 0xf0
 80004d2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004d8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004da:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004dc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004e0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ec:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80006a0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80004f0:	4c69      	ldr	r4, [pc, #420]	; (8000698 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80004f2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f4:	680a      	ldr	r2, [r1, #0]
 80004f6:	fa32 f503 	lsrs.w	r5, r2, r3
 80004fa:	d102      	bne.n	8000502 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80004fc:	b003      	add	sp, #12
 80004fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000502:	f04f 0e01 	mov.w	lr, #1
 8000506:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800050a:	ea1e 0202 	ands.w	r2, lr, r2
 800050e:	f000 8090 	beq.w	8000632 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000512:	684d      	ldr	r5, [r1, #4]
 8000514:	f005 0603 	and.w	r6, r5, #3
 8000518:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800051c:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000520:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000522:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000526:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000528:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800052c:	f200 8083 	bhi.w	8000636 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8000530:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000532:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000536:	68cf      	ldr	r7, [r1, #12]
 8000538:	fa07 f708 	lsl.w	r7, r7, r8
 800053c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000540:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000542:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000544:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000548:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800054c:	409f      	lsls	r7, r3
 800054e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000552:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000554:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000556:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800055a:	688f      	ldr	r7, [r1, #8]
 800055c:	fa07 f708 	lsl.w	r7, r7, r8
 8000560:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000564:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8000566:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000568:	d071      	beq.n	800064e <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 800056a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800056c:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000570:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000574:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000576:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800057a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800057c:	d059      	beq.n	8000632 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000582:	f046 0601 	orr.w	r6, r6, #1
 8000586:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 800058a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800058e:	f023 0703 	bic.w	r7, r3, #3
 8000592:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000596:	f006 0601 	and.w	r6, r6, #1
 800059a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800059e:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005a0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80005a6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80005ac:	f04f 0c0f 	mov.w	ip, #15
 80005b0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005b4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005b8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005bc:	d05f      	beq.n	800067e <HAL_GPIO_Init+0x196>
 80005be:	4e37      	ldr	r6, [pc, #220]	; (800069c <HAL_GPIO_Init+0x1b4>)
 80005c0:	42b0      	cmp	r0, r6
 80005c2:	d05e      	beq.n	8000682 <HAL_GPIO_Init+0x19a>
 80005c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005c8:	42b0      	cmp	r0, r6
 80005ca:	d05c      	beq.n	8000686 <HAL_GPIO_Init+0x19e>
 80005cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005d0:	42b0      	cmp	r0, r6
 80005d2:	d05a      	beq.n	800068a <HAL_GPIO_Init+0x1a2>
 80005d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005d8:	42b0      	cmp	r0, r6
 80005da:	d058      	beq.n	800068e <HAL_GPIO_Init+0x1a6>
 80005dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005e0:	42b0      	cmp	r0, r6
 80005e2:	d056      	beq.n	8000692 <HAL_GPIO_Init+0x1aa>
 80005e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005e8:	42b0      	cmp	r0, r6
 80005ea:	bf0c      	ite	eq
 80005ec:	2606      	moveq	r6, #6
 80005ee:	2607      	movne	r6, #7
 80005f0:	fa06 f60e 	lsl.w	r6, r6, lr
 80005f4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005f8:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 80005fa:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 80005fc:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80005fe:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000602:	bf0c      	ite	eq
 8000604:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000606:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8000608:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800060a:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800060c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000610:	bf0c      	ite	eq
 8000612:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000614:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8000616:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8000618:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800061a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800061e:	bf0c      	ite	eq
 8000620:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000622:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8000624:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8000626:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000628:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800062a:	bf54      	ite	pl
 800062c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800062e:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8000630:	6026      	str	r6, [r4, #0]
    position++;
 8000632:	3301      	adds	r3, #1
 8000634:	e75e      	b.n	80004f4 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000636:	2e03      	cmp	r6, #3
 8000638:	d18c      	bne.n	8000554 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800063a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800063c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000640:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8000644:	409f      	lsls	r7, r3
 8000646:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800064a:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800064c:	e78d      	b.n	800056a <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800064e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000652:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000656:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800065a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800065e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000662:	f04f 0e0f 	mov.w	lr, #15
 8000666:	fa0e fe0b 	lsl.w	lr, lr, fp
 800066a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800066e:	690f      	ldr	r7, [r1, #16]
 8000670:	fa07 f70b 	lsl.w	r7, r7, fp
 8000674:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000678:	f8ca 7020 	str.w	r7, [sl, #32]
 800067c:	e775      	b.n	800056a <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800067e:	2600      	movs	r6, #0
 8000680:	e7b6      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 8000682:	2601      	movs	r6, #1
 8000684:	e7b4      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 8000686:	2602      	movs	r6, #2
 8000688:	e7b2      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 800068a:	2603      	movs	r6, #3
 800068c:	e7b0      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 800068e:	2604      	movs	r6, #4
 8000690:	e7ae      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 8000692:	2605      	movs	r6, #5
 8000694:	e7ac      	b.n	80005f0 <HAL_GPIO_Init+0x108>
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	48000400 	.word	0x48000400
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006a4:	b10a      	cbz	r2, 80006aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006a6:	6181      	str	r1, [r0, #24]
 80006a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80006ac:	4770      	bx	lr
	...

080006b0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <HAL_PWREx_GetVoltageRange+0xc>)
 80006b2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80006b4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40007000 	.word	0x40007000

080006c0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006c2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006c4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006cc:	d11d      	bne.n	800070a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006d2:	d101      	bne.n	80006d8 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80006d4:	2000      	movs	r0, #0
 80006d6:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	6813      	ldr	r3, [r2, #0]
 80006da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2132      	movs	r1, #50	; 0x32
 80006ea:	434b      	muls	r3, r1
 80006ec:	490e      	ldr	r1, [pc, #56]	; (8000728 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80006f4:	6951      	ldr	r1, [r2, #20]
 80006f6:	0549      	lsls	r1, r1, #21
 80006f8:	d500      	bpl.n	80006fc <HAL_PWREx_ControlVoltageScaling+0x3c>
 80006fa:	b923      	cbnz	r3, 8000706 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80006fc:	6953      	ldr	r3, [r2, #20]
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	d5e8      	bpl.n	80006d4 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8000702:	2003      	movs	r0, #3
}
 8000704:	4770      	bx	lr
        wait_loop_index--;
 8000706:	3b01      	subs	r3, #1
 8000708:	e7f4      	b.n	80006f4 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800070a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800070e:	bf1f      	itttt	ne
 8000710:	6813      	ldrne	r3, [r2, #0]
 8000712:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8000716:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800071a:	6013      	strne	r3, [r2, #0]
 800071c:	e7da      	b.n	80006d4 <HAL_PWREx_ControlVoltageScaling+0x14>
 800071e:	bf00      	nop
 8000720:	40007000 	.word	0x40007000
 8000724:	20000000 	.word	0x20000000
 8000728:	000f4240 	.word	0x000f4240

0800072c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800072c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800072e:	4d1e      	ldr	r5, [pc, #120]	; (80007a8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000730:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000732:	00da      	lsls	r2, r3, #3
{
 8000734:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000736:	d518      	bpl.n	800076a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000738:	f7ff ffba 	bl	80006b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800073c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000740:	d123      	bne.n	800078a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000742:	2c80      	cmp	r4, #128	; 0x80
 8000744:	d929      	bls.n	800079a <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000746:	2ca0      	cmp	r4, #160	; 0xa0
 8000748:	bf8c      	ite	hi
 800074a:	2402      	movhi	r4, #2
 800074c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800074e:	4917      	ldr	r1, [pc, #92]	; (80007ac <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f022 0207 	bic.w	r2, r2, #7
 8000756:	4322      	orrs	r2, r4
 8000758:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800075a:	6808      	ldr	r0, [r1, #0]
 800075c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000760:	1b00      	subs	r0, r0, r4
 8000762:	bf18      	it	ne
 8000764:	2001      	movne	r0, #1
 8000766:	b003      	add	sp, #12
 8000768:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	65ab      	str	r3, [r5, #88]	; 0x58
 8000772:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800077c:	f7ff ff98 	bl	80006b0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000780:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000786:	65ab      	str	r3, [r5, #88]	; 0x58
 8000788:	e7d8      	b.n	800073c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800078a:	2c80      	cmp	r4, #128	; 0x80
 800078c:	d807      	bhi.n	800079e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800078e:	d008      	beq.n	80007a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000790:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000794:	425c      	negs	r4, r3
 8000796:	415c      	adcs	r4, r3
 8000798:	e7d9      	b.n	800074e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800079a:	2400      	movs	r4, #0
 800079c:	e7d7      	b.n	800074e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800079e:	2403      	movs	r4, #3
 80007a0:	e7d5      	b.n	800074e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80007a2:	2402      	movs	r4, #2
 80007a4:	e7d3      	b.n	800074e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <HAL_RCC_GetSysClockFreq+0x8c>)
 80007b2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007b4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007b6:	f012 020c 	ands.w	r2, r2, #12
 80007ba:	d005      	beq.n	80007c8 <HAL_RCC_GetSysClockFreq+0x18>
 80007bc:	2a0c      	cmp	r2, #12
 80007be:	d115      	bne.n	80007ec <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007c0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80007c4:	2901      	cmp	r1, #1
 80007c6:	d118      	bne.n	80007fa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80007c8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80007ca:	481d      	ldr	r0, [pc, #116]	; (8000840 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80007cc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80007ce:	bf55      	itete	pl
 80007d0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80007d4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80007d6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80007da:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80007de:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80007e2:	b34a      	cbz	r2, 8000838 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80007e4:	2a0c      	cmp	r2, #12
 80007e6:	d009      	beq.n	80007fc <HAL_RCC_GetSysClockFreq+0x4c>
 80007e8:	2000      	movs	r0, #0
  return sysclockfreq;
 80007ea:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80007ec:	2a04      	cmp	r2, #4
 80007ee:	d022      	beq.n	8000836 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80007f0:	2a08      	cmp	r2, #8
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <HAL_RCC_GetSysClockFreq+0x94>)
 80007f4:	bf18      	it	ne
 80007f6:	2000      	movne	r0, #0
 80007f8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80007fa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80007fc:	68da      	ldr	r2, [r3, #12]
 80007fe:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000802:	2a02      	cmp	r2, #2
 8000804:	d015      	beq.n	8000832 <HAL_RCC_GetSysClockFreq+0x82>
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <HAL_RCC_GetSysClockFreq+0x94>)
 8000808:	2a03      	cmp	r2, #3
 800080a:	bf08      	it	eq
 800080c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800080e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000816:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000818:	68d8      	ldr	r0, [r3, #12]
 800081a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800081e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000822:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000824:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000826:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000828:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800082c:	fbb2 f0f0 	udiv	r0, r2, r0
 8000830:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_RCC_GetSysClockFreq+0x98>)
 8000834:	e7eb      	b.n	800080e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	08000f20 	.word	0x08000f20
 8000844:	007a1200 	.word	0x007a1200
 8000848:	00f42400 	.word	0x00f42400

0800084c <HAL_RCC_OscConfig>:
{
 800084c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000850:	4605      	mov	r5, r0
 8000852:	b918      	cbnz	r0, 800085c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000854:	2001      	movs	r0, #1
}
 8000856:	b003      	add	sp, #12
 8000858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800085c:	4c92      	ldr	r4, [pc, #584]	; (8000aa8 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800085e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000860:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000862:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000864:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000866:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800086a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800086e:	d53d      	bpl.n	80008ec <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000870:	b11e      	cbz	r6, 800087a <HAL_RCC_OscConfig+0x2e>
 8000872:	2e0c      	cmp	r6, #12
 8000874:	d166      	bne.n	8000944 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000876:	2f01      	cmp	r7, #1
 8000878:	d164      	bne.n	8000944 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	0798      	lsls	r0, r3, #30
 800087e:	d502      	bpl.n	8000886 <HAL_RCC_OscConfig+0x3a>
 8000880:	69ab      	ldr	r3, [r5, #24]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0e6      	beq.n	8000854 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	6a28      	ldr	r0, [r5, #32]
 800088a:	0719      	lsls	r1, r3, #28
 800088c:	bf56      	itet	pl
 800088e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000892:	6823      	ldrmi	r3, [r4, #0]
 8000894:	091b      	lsrpl	r3, r3, #4
 8000896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800089a:	4298      	cmp	r0, r3
 800089c:	d93b      	bls.n	8000916 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800089e:	f7ff ff45 	bl	800072c <RCC_SetFlashLatencyFromMSIRange>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d1d6      	bne.n	8000854 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6023      	str	r3, [r4, #0]
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	6a2a      	ldr	r2, [r5, #32]
 80008b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008b6:	4313      	orrs	r3, r2
 80008b8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008ba:	6863      	ldr	r3, [r4, #4]
 80008bc:	69ea      	ldr	r2, [r5, #28]
 80008be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008c6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008c8:	f7ff ff72 	bl	80007b0 <HAL_RCC_GetSysClockFreq>
 80008cc:	68a3      	ldr	r3, [r4, #8]
 80008ce:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x260>)
 80008d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008d4:	5cd3      	ldrb	r3, [r2, r3]
 80008d6:	f003 031f 	and.w	r3, r3, #31
 80008da:	40d8      	lsrs	r0, r3
 80008dc:	4b74      	ldr	r3, [pc, #464]	; (8000ab0 <HAL_RCC_OscConfig+0x264>)
 80008de:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80008e0:	4b74      	ldr	r3, [pc, #464]	; (8000ab4 <HAL_RCC_OscConfig+0x268>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	f7ff fd4c 	bl	8000380 <HAL_InitTick>
        if(status != HAL_OK)
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d1b4      	bne.n	8000856 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	07d8      	lsls	r0, r3, #31
 80008f0:	d45f      	bmi.n	80009b2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	0799      	lsls	r1, r3, #30
 80008f6:	f100 809e 	bmi.w	8000a36 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	0718      	lsls	r0, r3, #28
 80008fe:	f100 80db 	bmi.w	8000ab8 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	0759      	lsls	r1, r3, #29
 8000906:	f100 8101 	bmi.w	8000b0c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800090a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800090c:	2b00      	cmp	r3, #0
 800090e:	f040 816a 	bne.w	8000be6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8000912:	2000      	movs	r0, #0
 8000914:	e79f      	b.n	8000856 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6023      	str	r3, [r4, #0]
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000924:	4303      	orrs	r3, r0
 8000926:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	69ea      	ldr	r2, [r5, #28]
 800092c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000934:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000936:	2e00      	cmp	r6, #0
 8000938:	d1c6      	bne.n	80008c8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800093a:	f7ff fef7 	bl	800072c <RCC_SetFlashLatencyFromMSIRange>
 800093e:	2800      	cmp	r0, #0
 8000940:	d0c2      	beq.n	80008c8 <HAL_RCC_OscConfig+0x7c>
 8000942:	e787      	b.n	8000854 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000944:	69ab      	ldr	r3, [r5, #24]
 8000946:	b31b      	cbz	r3, 8000990 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000950:	f7ff fd58 	bl	8000404 <HAL_GetTick>
 8000954:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	079a      	lsls	r2, r3, #30
 800095a:	d511      	bpl.n	8000980 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6023      	str	r3, [r4, #0]
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	6a2a      	ldr	r2, [r5, #32]
 8000968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800096c:	4313      	orrs	r3, r2
 800096e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	69ea      	ldr	r2, [r5, #28]
 8000974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000978:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800097c:	6063      	str	r3, [r4, #4]
 800097e:	e7b5      	b.n	80008ec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000980:	f7ff fd40 	bl	8000404 <HAL_GetTick>
 8000984:	eba0 0008 	sub.w	r0, r0, r8
 8000988:	2802      	cmp	r0, #2
 800098a:	d9e4      	bls.n	8000956 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800098c:	2003      	movs	r0, #3
 800098e:	e762      	b.n	8000856 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	f023 0301 	bic.w	r3, r3, #1
 8000996:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fd34 	bl	8000404 <HAL_GetTick>
 800099c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	079b      	lsls	r3, r3, #30
 80009a2:	d5a3      	bpl.n	80008ec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009a4:	f7ff fd2e 	bl	8000404 <HAL_GetTick>
 80009a8:	eba0 0008 	sub.w	r0, r0, r8
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9f6      	bls.n	800099e <HAL_RCC_OscConfig+0x152>
 80009b0:	e7ec      	b.n	800098c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80009b2:	2e08      	cmp	r6, #8
 80009b4:	d003      	beq.n	80009be <HAL_RCC_OscConfig+0x172>
 80009b6:	2e0c      	cmp	r6, #12
 80009b8:	d108      	bne.n	80009cc <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009ba:	2f03      	cmp	r7, #3
 80009bc:	d106      	bne.n	80009cc <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	039a      	lsls	r2, r3, #14
 80009c2:	d596      	bpl.n	80008f2 <HAL_RCC_OscConfig+0xa6>
 80009c4:	686b      	ldr	r3, [r5, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d193      	bne.n	80008f2 <HAL_RCC_OscConfig+0xa6>
 80009ca:	e743      	b.n	8000854 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009cc:	686b      	ldr	r3, [r5, #4]
 80009ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d2:	d110      	bne.n	80009f6 <HAL_RCC_OscConfig+0x1aa>
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fd12 	bl	8000404 <HAL_GetTick>
 80009e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	039b      	lsls	r3, r3, #14
 80009e6:	d484      	bmi.n	80008f2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009e8:	f7ff fd0c 	bl	8000404 <HAL_GetTick>
 80009ec:	eba0 0008 	sub.w	r0, r0, r8
 80009f0:	2864      	cmp	r0, #100	; 0x64
 80009f2:	d9f6      	bls.n	80009e2 <HAL_RCC_OscConfig+0x196>
 80009f4:	e7ca      	b.n	800098c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009fa:	d104      	bne.n	8000a06 <HAL_RCC_OscConfig+0x1ba>
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a02:	6023      	str	r3, [r4, #0]
 8000a04:	e7e6      	b.n	80009d4 <HAL_RCC_OscConfig+0x188>
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a0c:	6022      	str	r2, [r4, #0]
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a14:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1e0      	bne.n	80009dc <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fcf3 	bl	8000404 <HAL_GetTick>
 8000a1e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	0398      	lsls	r0, r3, #14
 8000a24:	f57f af65 	bpl.w	80008f2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a28:	f7ff fcec 	bl	8000404 <HAL_GetTick>
 8000a2c:	eba0 0008 	sub.w	r0, r0, r8
 8000a30:	2864      	cmp	r0, #100	; 0x64
 8000a32:	d9f5      	bls.n	8000a20 <HAL_RCC_OscConfig+0x1d4>
 8000a34:	e7aa      	b.n	800098c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a36:	2e04      	cmp	r6, #4
 8000a38:	d003      	beq.n	8000a42 <HAL_RCC_OscConfig+0x1f6>
 8000a3a:	2e0c      	cmp	r6, #12
 8000a3c:	d110      	bne.n	8000a60 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a3e:	2f02      	cmp	r7, #2
 8000a40:	d10e      	bne.n	8000a60 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	0559      	lsls	r1, r3, #21
 8000a46:	d503      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x204>
 8000a48:	68eb      	ldr	r3, [r5, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f43f af02 	beq.w	8000854 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a50:	6863      	ldr	r3, [r4, #4]
 8000a52:	692a      	ldr	r2, [r5, #16]
 8000a54:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000a58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a5c:	6063      	str	r3, [r4, #4]
 8000a5e:	e74c      	b.n	80008fa <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a60:	68eb      	ldr	r3, [r5, #12]
 8000a62:	b17b      	cbz	r3, 8000a84 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a6c:	f7ff fcca 	bl	8000404 <HAL_GetTick>
 8000a70:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	055a      	lsls	r2, r3, #21
 8000a76:	d4eb      	bmi.n	8000a50 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a78:	f7ff fcc4 	bl	8000404 <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f7      	bls.n	8000a72 <HAL_RCC_OscConfig+0x226>
 8000a82:	e783      	b.n	800098c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fcba 	bl	8000404 <HAL_GetTick>
 8000a90:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	055b      	lsls	r3, r3, #21
 8000a96:	f57f af30 	bpl.w	80008fa <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fcb3 	bl	8000404 <HAL_GetTick>
 8000a9e:	1bc0      	subs	r0, r0, r7
 8000aa0:	2802      	cmp	r0, #2
 8000aa2:	d9f6      	bls.n	8000a92 <HAL_RCC_OscConfig+0x246>
 8000aa4:	e772      	b.n	800098c <HAL_RCC_OscConfig+0x140>
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	08000f10 	.word	0x08000f10
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ab8:	696b      	ldr	r3, [r5, #20]
 8000aba:	b19b      	cbz	r3, 8000ae4 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000abc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000ac8:	f7ff fc9c 	bl	8000404 <HAL_GetTick>
 8000acc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ace:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ad2:	079a      	lsls	r2, r3, #30
 8000ad4:	f53f af15 	bmi.w	8000902 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fc94 	bl	8000404 <HAL_GetTick>
 8000adc:	1bc0      	subs	r0, r0, r7
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f5      	bls.n	8000ace <HAL_RCC_OscConfig+0x282>
 8000ae2:	e753      	b.n	800098c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8000ae4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000af0:	f7ff fc88 	bl	8000404 <HAL_GetTick>
 8000af4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000af6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000afa:	079b      	lsls	r3, r3, #30
 8000afc:	f57f af01 	bpl.w	8000902 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b00:	f7ff fc80 	bl	8000404 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f5      	bls.n	8000af6 <HAL_RCC_OscConfig+0x2aa>
 8000b0a:	e73f      	b.n	800098c <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b0e:	00df      	lsls	r7, r3, #3
 8000b10:	d429      	bmi.n	8000b66 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b24:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b28:	4f85      	ldr	r7, [pc, #532]	; (8000d40 <HAL_RCC_OscConfig+0x4f4>)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	05d8      	lsls	r0, r3, #23
 8000b2e:	d51d      	bpl.n	8000b6c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	68ab      	ldr	r3, [r5, #8]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d12b      	bne.n	8000b8e <HAL_RCC_OscConfig+0x342>
 8000b36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000b42:	f7ff fc5f 	bl	8000404 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b46:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b4a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000b4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b50:	079a      	lsls	r2, r3, #30
 8000b52:	d542      	bpl.n	8000bda <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8000b54:	f1b8 0f00 	cmp.w	r8, #0
 8000b58:	f43f aed7 	beq.w	800090a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b62:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b64:	e6d1      	b.n	800090a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8000b66:	f04f 0800 	mov.w	r8, #0
 8000b6a:	e7dd      	b.n	8000b28 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b74:	f7ff fc46 	bl	8000404 <HAL_GetTick>
 8000b78:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	05d9      	lsls	r1, r3, #23
 8000b7e:	d4d7      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b80:	f7ff fc40 	bl	8000404 <HAL_GetTick>
 8000b84:	eba0 0009 	sub.w	r0, r0, r9
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f6      	bls.n	8000b7a <HAL_RCC_OscConfig+0x32e>
 8000b8c:	e6fe      	b.n	800098c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d106      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x354>
 8000b92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000b9e:	e7ca      	b.n	8000b36 <HAL_RCC_OscConfig+0x2ea>
 8000ba0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000ba4:	f022 0201 	bic.w	r2, r2, #1
 8000ba8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000bac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000bb0:	f022 0204 	bic.w	r2, r2, #4
 8000bb4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1c2      	bne.n	8000b42 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fc22 	bl	8000404 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bc4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bc6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000bca:	079b      	lsls	r3, r3, #30
 8000bcc:	d5c2      	bpl.n	8000b54 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bce:	f7ff fc19 	bl	8000404 <HAL_GetTick>
 8000bd2:	1bc0      	subs	r0, r0, r7
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x37a>
 8000bd8:	e6d8      	b.n	800098c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bda:	f7ff fc13 	bl	8000404 <HAL_GetTick>
 8000bde:	1bc0      	subs	r0, r0, r7
 8000be0:	4548      	cmp	r0, r9
 8000be2:	d9b3      	bls.n	8000b4c <HAL_RCC_OscConfig+0x300>
 8000be4:	e6d2      	b.n	800098c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	f040 808f 	bne.w	8000d0a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8000bec:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000bf0:	f003 0103 	and.w	r1, r3, #3
 8000bf4:	4291      	cmp	r1, r2
 8000bf6:	d124      	bne.n	8000c42 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000bf8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000bfa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000bfe:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c00:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000c04:	d11d      	bne.n	8000c42 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c06:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000c08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c0c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000c10:	d117      	bne.n	8000c42 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000c12:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000c14:	3a07      	subs	r2, #7
 8000c16:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000c1a:	bf18      	it	ne
 8000c1c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c1e:	4291      	cmp	r1, r2
 8000c20:	d10f      	bne.n	8000c42 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c22:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000c24:	0852      	lsrs	r2, r2, #1
 8000c26:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000c2a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000c2c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000c30:	d107      	bne.n	8000c42 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000c32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c34:	0852      	lsrs	r2, r2, #1
 8000c36:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000c3a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c3c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8000c40:	d04a      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000c42:	2e0c      	cmp	r6, #12
 8000c44:	f43f ae06 	beq.w	8000854 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	015f      	lsls	r7, r3, #5
 8000c4c:	f53f ae02 	bmi.w	8000854 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	00de      	lsls	r6, r3, #3
 8000c54:	f53f adfe 	bmi.w	8000854 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c5e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8000c60:	f7ff fbd0 	bl	8000404 <HAL_GetTick>
 8000c64:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	0198      	lsls	r0, r3, #6
 8000c6a:	d42f      	bmi.n	8000ccc <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c6c:	68e2      	ldr	r2, [r4, #12]
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_RCC_OscConfig+0x4f8>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c74:	4313      	orrs	r3, r2
 8000c76:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c7c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000c7e:	3a01      	subs	r2, #1
 8000c80:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c84:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000c86:	0912      	lsrs	r2, r2, #4
 8000c88:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000c8c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000c8e:	0852      	lsrs	r2, r2, #1
 8000c90:	3a01      	subs	r2, #1
 8000c92:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000c96:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c98:	0852      	lsrs	r2, r2, #1
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000ca0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ca8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000caa:	68e3      	ldr	r3, [r4, #12]
 8000cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cb0:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8000cb2:	f7ff fba7 	bl	8000404 <HAL_GetTick>
 8000cb6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	0199      	lsls	r1, r3, #6
 8000cbc:	f53f ae29 	bmi.w	8000912 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cc0:	f7ff fba0 	bl	8000404 <HAL_GetTick>
 8000cc4:	1b40      	subs	r0, r0, r5
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9f6      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x46c>
 8000cca:	e65f      	b.n	800098c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ccc:	f7ff fb9a 	bl	8000404 <HAL_GetTick>
 8000cd0:	1b80      	subs	r0, r0, r6
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d9c7      	bls.n	8000c66 <HAL_RCC_OscConfig+0x41a>
 8000cd6:	e659      	b.n	800098c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	019a      	lsls	r2, r3, #6
 8000cdc:	f53f ae19 	bmi.w	8000912 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ce6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ce8:	68e3      	ldr	r3, [r4, #12]
 8000cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cee:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8000cf0:	f7ff fb88 	bl	8000404 <HAL_GetTick>
 8000cf4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	019b      	lsls	r3, r3, #6
 8000cfa:	f53f ae0a 	bmi.w	8000912 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cfe:	f7ff fb81 	bl	8000404 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d9f6      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x4aa>
 8000d08:	e640      	b.n	800098c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d0a:	2e0c      	cmp	r6, #12
 8000d0c:	f43f ada2 	beq.w	8000854 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d18:	f7ff fb74 	bl	8000404 <HAL_GetTick>
 8000d1c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8000d24:	d105      	bne.n	8000d32 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000d26:	68e1      	ldr	r1, [r4, #12]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_RCC_OscConfig+0x4fc>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e591      	b.n	8000856 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d32:	f7ff fb67 	bl	8000404 <HAL_GetTick>
 8000d36:	1b40      	subs	r0, r0, r5
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d9f0      	bls.n	8000d1e <HAL_RCC_OscConfig+0x4d2>
 8000d3c:	e626      	b.n	800098c <HAL_RCC_OscConfig+0x140>
 8000d3e:	bf00      	nop
 8000d40:	40007000 	.word	0x40007000
 8000d44:	f99d808c 	.word	0xf99d808c
 8000d48:	feeefffc 	.word	0xfeeefffc

08000d4c <HAL_RCC_ClockConfig>:
{
 8000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d50:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d52:	4604      	mov	r4, r0
 8000d54:	b910      	cbnz	r0, 8000d5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
}
 8000d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d5c:	4a4b      	ldr	r2, [pc, #300]	; (8000e8c <HAL_RCC_ClockConfig+0x140>)
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d32c      	bcc.n	8000dc2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d68:	6821      	ldr	r1, [r4, #0]
 8000d6a:	0788      	lsls	r0, r1, #30
 8000d6c:	d434      	bmi.n	8000dd8 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d6e:	07c9      	lsls	r1, r1, #31
 8000d70:	d43f      	bmi.n	8000df2 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d72:	6821      	ldr	r1, [r4, #0]
 8000d74:	078a      	lsls	r2, r1, #30
 8000d76:	d468      	bmi.n	8000e4a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d78:	4a44      	ldr	r2, [pc, #272]	; (8000e8c <HAL_RCC_ClockConfig+0x140>)
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d86f      	bhi.n	8000e64 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d84:	f011 0f04 	tst.w	r1, #4
 8000d88:	4d41      	ldr	r5, [pc, #260]	; (8000e90 <HAL_RCC_ClockConfig+0x144>)
 8000d8a:	d177      	bne.n	8000e7c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d8c:	070b      	lsls	r3, r1, #28
 8000d8e:	d506      	bpl.n	8000d9e <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d90:	68ab      	ldr	r3, [r5, #8]
 8000d92:	6922      	ldr	r2, [r4, #16]
 8000d94:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d9c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d9e:	f7ff fd07 	bl	80007b0 <HAL_RCC_GetSysClockFreq>
 8000da2:	68ab      	ldr	r3, [r5, #8]
 8000da4:	4a3b      	ldr	r2, [pc, #236]	; (8000e94 <HAL_RCC_ClockConfig+0x148>)
 8000da6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <HAL_RCC_ClockConfig+0x14c>)
 8000db8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_RCC_ClockConfig+0x150>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f7ff badf 	b.w	8000380 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f023 0307 	bic.w	r3, r3, #7
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dcc:	6813      	ldr	r3, [r2, #0]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d1bf      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xa>
 8000dd6:	e7c7      	b.n	8000d68 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000dd8:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <HAL_RCC_ClockConfig+0x144>)
 8000dda:	68a0      	ldr	r0, [r4, #8]
 8000ddc:	6893      	ldr	r3, [r2, #8]
 8000dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000de2:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000de4:	bf81      	itttt	hi
 8000de6:	6893      	ldrhi	r3, [r2, #8]
 8000de8:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8000dec:	4303      	orrhi	r3, r0
 8000dee:	6093      	strhi	r3, [r2, #8]
 8000df0:	e7bd      	b.n	8000d6e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df2:	6862      	ldr	r2, [r4, #4]
 8000df4:	4e26      	ldr	r6, [pc, #152]	; (8000e90 <HAL_RCC_ClockConfig+0x144>)
 8000df6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000df8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dfa:	d11a      	bne.n	8000e32 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dfc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e00:	d0a9      	beq.n	8000d56 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e02:	68b3      	ldr	r3, [r6, #8]
 8000e04:	f023 0303 	bic.w	r3, r3, #3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e0c:	f7ff fafa 	bl	8000404 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e10:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e14:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e16:	68b3      	ldr	r3, [r6, #8]
 8000e18:	6862      	ldr	r2, [r4, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e22:	d0a6      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e24:	f7ff faee 	bl	8000404 <HAL_GetTick>
 8000e28:	1bc0      	subs	r0, r0, r7
 8000e2a:	4540      	cmp	r0, r8
 8000e2c:	d9f3      	bls.n	8000e16 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8000e2e:	2003      	movs	r0, #3
 8000e30:	e792      	b.n	8000d58 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e32:	2a02      	cmp	r2, #2
 8000e34:	d102      	bne.n	8000e3c <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e3a:	e7e1      	b.n	8000e00 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000e3c:	b912      	cbnz	r2, 8000e44 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e3e:	f013 0f02 	tst.w	r3, #2
 8000e42:	e7dd      	b.n	8000e00 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e48:	e7da      	b.n	8000e00 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_RCC_ClockConfig+0x144>)
 8000e4c:	68a0      	ldr	r0, [r4, #8]
 8000e4e:	6893      	ldr	r3, [r2, #8]
 8000e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e54:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e56:	bf3f      	itttt	cc
 8000e58:	6893      	ldrcc	r3, [r2, #8]
 8000e5a:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8000e5e:	4303      	orrcc	r3, r0
 8000e60:	6093      	strcc	r3, [r2, #8]
 8000e62:	e789      	b.n	8000d78 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f023 0307 	bic.w	r3, r3, #7
 8000e6a:	432b      	orrs	r3, r5
 8000e6c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	42ab      	cmp	r3, r5
 8000e76:	f47f af6e 	bne.w	8000d56 <HAL_RCC_ClockConfig+0xa>
 8000e7a:	e783      	b.n	8000d84 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e7c:	68ab      	ldr	r3, [r5, #8]
 8000e7e:	68e2      	ldr	r2, [r4, #12]
 8000e80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60ab      	str	r3, [r5, #8]
 8000e88:	e780      	b.n	8000d8c <HAL_RCC_ClockConfig+0x40>
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	08000f10 	.word	0x08000f10
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <memset>:
 8000ea0:	4402      	add	r2, r0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <memset+0xa>
 8000ea8:	4770      	bx	lr
 8000eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8000eae:	e7f9      	b.n	8000ea4 <memset+0x4>

08000eb0 <__libc_init_array>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	4d0d      	ldr	r5, [pc, #52]	; (8000ee8 <__libc_init_array+0x38>)
 8000eb4:	4c0d      	ldr	r4, [pc, #52]	; (8000eec <__libc_init_array+0x3c>)
 8000eb6:	1b64      	subs	r4, r4, r5
 8000eb8:	10a4      	asrs	r4, r4, #2
 8000eba:	2600      	movs	r6, #0
 8000ebc:	42a6      	cmp	r6, r4
 8000ebe:	d109      	bne.n	8000ed4 <__libc_init_array+0x24>
 8000ec0:	4d0b      	ldr	r5, [pc, #44]	; (8000ef0 <__libc_init_array+0x40>)
 8000ec2:	4c0c      	ldr	r4, [pc, #48]	; (8000ef4 <__libc_init_array+0x44>)
 8000ec4:	f000 f818 	bl	8000ef8 <_init>
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	10a4      	asrs	r4, r4, #2
 8000ecc:	2600      	movs	r6, #0
 8000ece:	42a6      	cmp	r6, r4
 8000ed0:	d105      	bne.n	8000ede <__libc_init_array+0x2e>
 8000ed2:	bd70      	pop	{r4, r5, r6, pc}
 8000ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed8:	4798      	blx	r3
 8000eda:	3601      	adds	r6, #1
 8000edc:	e7ee      	b.n	8000ebc <__libc_init_array+0xc>
 8000ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee2:	4798      	blx	r3
 8000ee4:	3601      	adds	r6, #1
 8000ee6:	e7f2      	b.n	8000ece <__libc_init_array+0x1e>
 8000ee8:	08000f50 	.word	0x08000f50
 8000eec:	08000f50 	.word	0x08000f50
 8000ef0:	08000f50 	.word	0x08000f50
 8000ef4:	08000f54 	.word	0x08000f54

08000ef8 <_init>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr

08000f04 <_fini>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	bf00      	nop
 8000f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0a:	bc08      	pop	{r3}
 8000f0c:	469e      	mov	lr, r3
 8000f0e:	4770      	bx	lr
